services:
  django:
    build:
      context: ./
    container_name: django
    command: >
      sh -c "python manage.py makemigrations &&
            python manage.py migrate &&
            python manage.py collectstatic --noinput &&
            python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    restart: always
    depends_on:
      - mysqldb
    env_file:
      - .env
    volumes:
      - "./:/backend" # 수정: 로컬 프로젝트 루트 디렉토리를 컨테이너의 /backend와 연결
    networks:
      - app-tier

  mysqldb:
    image: mysql:latest
    env_file:
      - .env
    ports:
      - "3305:3306"
    volumes:
      - "mysqldata:/var/lib/mysql"
    restart: always
    networks:
      - app-tier

  # phpmyadmin:
  #   image: phpmyadmin
  #   restart: always
  #   links:
  #     - mysqldb
  #   ports:
  #     - 8080:80
  #   environment:
  #     PMA_ARBITRARY: 1
  #     PMA_HOST: mysqldb
  #     PMA_PORT: 3306
  #   networks:
  #     - app-tier

  redis:
    image: "redis:latest"
    ports:
      - "6379:6379"
    networks:
      - app-tier
    restart: always #연결용 재시작

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always # 연결 끊어질시 다시 시작용
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-tier

  celery:
    build: .
    container_name: celery_worker
    command: celery -A apiserver worker --loglevel=info --pool=prefork
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis
      - mysqldb
    volumes:
      - "./:/backend"
    networks:
      - app-tier

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443" # HTTPS를 사용할 경우
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # Nginx 설정 파일
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./static:/static # 정적 파일 (필요한 경우)
      - ./media:/media # 미디어 파일 (필요한 경우)
    depends_on:
      - django
    networks:
      - app-tier

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  nginx-exporter: #서비스 이름
    image: nginx/nginx-prometheus-exporter:latest #엑스포터 이미지
    container_name: nginx-exporter #컨테이너 이름
    ports:
      - "9113:9113" #엑스포터 포트. 포트/metrics로 데이터를 노출시킵니다.
    command: --nginx.scrape-uri=http://nginx:80/stub_status # 엔진엑스 /stub_status에서 데이터를 가지고 오라는 설정.
    depends_on:
      - nginx #엔진엑스가 작동해야지 이거도 쓸모가 있겠죠?
    networks:
      - app-tier #엔진엑스와 같은 네트워크

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/alert-rules.yml:/etc/prometheus/alert-rules.yml #추가된
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - app-tier

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana:/etc/grafana/provisioning #그라파나 설정(config) 볼륨. 대부분 불필요 합지만 놔두시는게 좋습니다.
    networks:
      - app-tier
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    ports:
      - "9100:9100"
    networks:
      - app-tier

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - app-tier

  alertmanager: #이미지
    image: prom/alertmanager:main
    container_name: alertmanager
    ports:
      - "9093:9093" #포트 9093 매핑
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml #설정파일 볼륨 추가
      - ./alertmanager/tmp:/data/ #데이터 담기 전용
    networks:
      - app-tier #같은 네트워크
    command: --config.file=/etc/alertmanager/alertmanager.yml --log.level=debug #설정파일 설정
    env_file:
      - .env # 환경변수 파일 추가
    environment:
      - api_url=${SLACK_WEBHOOK_URL} # 환경변수 전달

volumes:
  mysqldata: # 로컬 디렉토리를 지정했으므로, 익명 볼륨 제거 가능
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  app-tier:
    name: app-tier
    driver: bridge
