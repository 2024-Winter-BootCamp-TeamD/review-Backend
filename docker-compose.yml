services:
  django:
    build:
      context: ./
    container_name: django
    command: >
      sh -c "python manage.py makemigrations &&
            python manage.py migrate &&
            python manage.py collectstatic --noinput &&
            python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    restart: always
    depends_on:
      - mysqldb
    env_file:
      - .env
    volumes:
      - "./:/backend" # 수정: 로컬 프로젝트 루트 디렉토리를 컨테이너의 /backend와 연결
    networks:
      - app-tier

  mysqldb:
    image: mysql:latest
    env_file:
      - .env
    ports:
      - "3305:3306"
    volumes:
      - "mysqldata:/var/lib/mysql"
    restart: always
    networks:
      - app-tier

  phpmyadmin:
    image: phpmyadmin
    restart: always
    links:
      - mysqldb
    ports:
      - 8080:80
    environment:
      PMA_ARBITRARY: 1
      PMA_HOST: mysqldb
      PMA_PORT: 3306
    networks:
      - app-tier

  redis:
    image: "redis:latest"
    ports:
      - "6379:6379"
    networks:
      - app-tier
    restart: always #연결용 재시작

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: always # 연결 끊어질시 다시 시작용
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-tier

  celery:
    build: .
    container_name: celery_worker
    command: celery -A apiserver worker --loglevel=info --pool=prefork
    env_file:
      - .env
    depends_on:
      - rabbitmq
      - redis
      - mysqldb
    volumes:
      - "./:/backend"
    networks:
      - app-tier

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443" # HTTPS를 사용할 경우
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # Nginx 설정 파일
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./static:/static # 정적 파일 (필요한 경우)
      - ./media:/media # 미디어 파일 (필요한 경우)
    depends_on:
      - django
    networks:
      - app-tier

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - app-tier

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana:/etc/grafana/provisioning #그라파나 설정(config) 볼륨. 대부분 불필요 합지만 놔두시는게 좋습니다.
    networks:
      - app-tier
    depends_on:
      - prometheus

volumes:
  mysqldata: # 로컬 디렉토리를 지정했으므로, 익명 볼륨 제거 가능
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  app-tier:
    driver: bridge
